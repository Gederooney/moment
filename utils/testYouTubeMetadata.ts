/**
 * Script de test pour v√©rifier le service de m√©tadonn√©es YouTube
 * √Ä utiliser pour tester l'int√©gration pendant le d√©veloppement
 */

import { fetchYouTubeMetadata, fetchYouTubeMetadataWithFallback } from '../services/youtubeMetadata';

// URLs de test YouTube
const TEST_URLS = [
  'https://www.youtube.com/watch?v=dQw4w9WgXcQ', // Rick Roll (vid√©o populaire)
  'https://youtu.be/dQw4w9WgXcQ', // Format court
  'https://www.youtube.com/watch?v=jNQXAC9IVRw', // Autre vid√©o populaire
  'https://www.youtube.com/watch?v=invalid_id', // URL invalide pour tester le fallback
];

/**
 * Teste la r√©cup√©ration des m√©tadonn√©es pour une URL
 */
async function testSingleUrl(url: string) {
  console.log(`\nüß™ Test pour: ${url}`);

  try {
    // Test du service principal
    console.log('üì° R√©cup√©ration des m√©tadonn√©es...');
    const metadata = await fetchYouTubeMetadata(url);

    console.log('‚úÖ Succ√®s!');
    console.log(`üìù Titre: ${metadata.title}`);
    console.log(`üë§ Auteur: ${metadata.author_name}`);
    console.log(`üñºÔ∏è Thumbnail: ${metadata.thumbnail_url}`);
    console.log(`üìè Dimensions: ${metadata.thumbnail_width}x${metadata.thumbnail_height}`);

    return { success: true, metadata };
  } catch (error) {
    console.log('‚ùå √âchec du service principal');
    console.log(`üö® Erreur: ${error instanceof Error ? error.message : String(error)}`);

    // Test du fallback
    try {
      console.log('üîÑ Test du fallback...');
      const fallback = await fetchYouTubeMetadataWithFallback(url);

      console.log('‚úÖ Fallback r√©ussi!');
      console.log(`üìù Titre: ${fallback.title}`);
      console.log(`üë§ Auteur: ${fallback.author_name}`);
      console.log(`üñºÔ∏è Thumbnail: ${fallback.thumbnail_url}`);
      console.log(`üîó Source API: ${fallback.isFromApi ? 'Oui' : 'Non'}`);

      return { success: false, fallback };
    } catch (fallbackError) {
      console.log('‚ùå √âchec du fallback aussi');
      const errorMessage = fallbackError instanceof Error ? fallbackError.message : String(fallbackError);
      console.log(`üö® Erreur fallback: ${errorMessage}`);

      return { success: false, error: errorMessage };
    }
  }
}

/**
 * Lance tous les tests
 */
export async function runYouTubeMetadataTests() {
  console.log('üöÄ D√©but des tests du service YouTube Metadata');
  console.log('================================================');

  const results = [];

  for (const url of TEST_URLS) {
    const result = await testSingleUrl(url);
    results.push({ url, ...result });

    // Petite pause entre les tests pour √©viter les rate limits
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  console.log('\nüìä R√©sum√© des tests:');
  console.log('====================');

  const successCount = results.filter(r => r.success).length;
  const fallbackCount = results.filter(r => !r.success && r.fallback).length;
  const errorCount = results.filter(r => !r.success && !r.fallback).length;

  console.log(`‚úÖ Succ√®s API: ${successCount}/${TEST_URLS.length}`);
  console.log(`üîÑ Fallback: ${fallbackCount}/${TEST_URLS.length}`);
  console.log(`‚ùå Erreurs: ${errorCount}/${TEST_URLS.length}`);

  if (successCount + fallbackCount === TEST_URLS.length) {
    console.log('\nüéâ Tous les tests passent! Le service est op√©rationnel.');
  } else {
    console.log('\n‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la connectivit√© et les URLs.');
  }

  return results;
}

/**
 * Test rapide avec une seule URL
 */
export async function quickTest(url?: string) {
  const testUrl = url || 'https://www.youtube.com/watch?v=dQw4w9WgXcQ';

  console.log('‚ö° Test rapide du service YouTube Metadata');
  console.log('==========================================');

  const result = await testSingleUrl(testUrl);

  if (result.success) {
    console.log('\nüéâ Test rapide r√©ussi! Le service fonctionne.');
  } else if (result.fallback) {
    console.log('\n‚ö†Ô∏è L\'API a √©chou√© mais le fallback fonctionne.');
  } else {
    console.log('\n‚ùå Le service ne fonctionne pas correctement.');
  }

  return result;
}

/**
 * Test de performance
 */
export async function performanceTest() {
  const testUrl = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ';

  console.log('‚è±Ô∏è Test de performance');
  console.log('=====================');

  // Premier appel (sans cache)
  console.log('üì° Premier appel (sans cache)...');
  const start1 = Date.now();
  try {
    await fetchYouTubeMetadata(testUrl);
    const duration1 = Date.now() - start1;
    console.log(`‚úÖ Dur√©e: ${duration1}ms`);

    // Deuxi√®me appel (avec cache)
    console.log('üì° Deuxi√®me appel (avec cache)...');
    const start2 = Date.now();
    await fetchYouTubeMetadata(testUrl);
    const duration2 = Date.now() - start2;
    console.log(`‚úÖ Dur√©e: ${duration2}ms`);

    const improvement = duration1 - duration2;
    const improvementPercent = Math.round((improvement / duration1) * 100);

    console.log(`üöÄ Am√©lioration du cache: ${improvement}ms (${improvementPercent}%)`);

    return { firstCall: duration1, secondCall: duration2, improvement, improvementPercent };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    console.log(`‚ùå Erreur pendant le test de performance: ${errorMessage}`);
    return null;
  }
}